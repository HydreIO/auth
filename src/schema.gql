directive @MAXTEXTFIELDS on OBJECT
directive @NOFREQS on OBJECT
directive @TAG on FIELD_DEFINITION

type Query {
  """pong"""
  ping: String!
  """The public key"""
  public_key: String!
  """
  The logged user

  Throws:
    - USER_NOT_FOUND: If the user is not found
  """
  me: User!
}

type Mutation {
  """
  Create an user account and send an ACCOUNT_CREATE socket message

  Returns: true
  Throws:
    - REGISTRATION_DISABLED: If the registration is disabled
    - MAIL_INVALID: If the mail doesn't respect the policy
    - PASSWORD_INVALID: If the pwd doesn't respect the policy
    - MAIL_USED: If the mail is already used
  """
  create_user(mail: String!, pwd: String!): Boolean!

  """
  Create an user account for another person
  and send an ACCOUNT_INVITE socket message

  Returns: true
  Throws:
    - REGISTRATION_DISABLED: If the registration is disabled
    - MAIL_INVALID: If the mail doesn't respect the policy
    - USER_NOT_FOUND: If the user is not found
    - MAIL_USED: If the mail is already used
  """
  invite_user(mail: String!, payload: String): Boolean!

  """
  Creating a session means authenticating an user
  and saving a session hash which can be revoked later

  Returns: true if the session is new, false if it already existed
  Throws:
    - USER_NOT_FOUND: If the user doesn't exist or the password is invalid
    - MAIL_INVALID: If the mail doesn't respect the policy
    - PASSWORD_INVALID: If the pwd doesn't respect the policy
    - NO_PASSWORD: If the user has no password and first need to
      request a reset code to reset his password
    - ILLEGAL_SESSION: If the user agent is invalid
  """
  create_session(mail: String!, pwd: String!, remember: Boolean = false): Boolean!

  """
  Create and fix a fresh access token

  Returns: true
  Throws:
    - USER_NOT_FOUND: If the user is not found
    - ILLEGAL_SESSION: If the session was revoked
  """
  refresh_session: Boolean!

  """
  If the email exist, send a reset code.
  The code is only valid for 24h

  Returns: true
  Throws:
    - SPAM: If the user request too fast another code
  """
  create_pwd_reset_code(mail: String!): Boolean!

  """
  Resend an account confirmation code

  Returns: true
  Throws:
    - USER_NOT_FOUND: If the user is not found
    - SPAM: If the user request too fast another code
  """
  create_account_comfirm_code: Boolean!

  """
  Update an user's password
  If a reset code is not provided then the user must be logged

  Returns: true
  Throws:
    - PASSWORD_INVALID: If the pwd doesn't respect the policy
    - USER_NOT_FOUND: If the user is not found
    - INVALID_CODE: If the reset code is invalid or expired
  """
  update_pwd(code: String, mail: String pwd: String!): Boolean!

  """
  Confirm the user account

  Returns: true
  Throws:
    - USER_NOT_FOUND: If the user is not found
    - INVALID_CODE: If the verification code is invalid or expired
  """
  confirm_account(code: String!): Boolean!

  """
  Try to delete a session.
  If the ID is provided and the session exist it will be deleted.
  If the ID is not provided it will delete the current session
  If the user is not logged then it just remove session cookies

  Returns: true
  Throws:
    - ILLEGAL_SESSION: If the provided id doesn't exist
  """
  delete_session(id: ID): Boolean!

  """
  Attempt to delete some users

  Returns: true
  Throws:
    - USER_NOT_FOUND: If the user is not found
    - UNAUTHORIZED: If the user is not an admin
  """
  admin_delete_users(ids: [ID!]!): Boolean!

  """
  Update an user's password (requires admin rights)

  Returns: true
  Throws:
    - USER_NOT_FOUND: If the user is not found
    - UNAUTHORIZED: If the user is not an admin
  """
  admin_update_pwd(id: ID!, pwd: String!): Boolean!
}

type Session {
  uuid: ID!
  hash: String! @TAG
  ip: String
  browserName: String
  osName: String
  deviceModel: String
  deviceType: String
  deviceVendor: String
}

type User @NOFREQS {
  uuid: ID!
  mail: String! @TAG
  sessions: [Session!]!
  verified: Boolean!
}