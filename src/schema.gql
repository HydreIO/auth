type Query {
  """pong"""
  ping: String!
  """The public key"""
  public_key: String!
  """The logged user"""
  me: User!
}

type Mutation {
  """
  Create an user account and send an ACCOUNT_CREATE socket message

  Returns: true
  Throws:
    - MAIL_INVALID: If the mail doesn't respect the policy
    - PASSWORD_INVALID: If the pwd doesn't respect the policy
    - MAIL_USED: If the mail is already used
    - REGISTRATION_DISABLED: If the registration is disabled
  """
  create_user(mail: String!, pwd: String!): Boolean!

  """
  Create an user account for another person
  and send an ACCOUNT_INVITE socket message

  Returns: true
  Throws:
    - USER_NOT_FOUND: If the user is not logged
    - MAIL_INVALID: If the mail doesn't respect the policy
    - MAIL_USED: If the mail is already used
    - REGISTRATION_DISABLED: If the registration is disabled
  """
  invite_user(mail: String!, payload: String): Boolean!

  """
  Creating a session means authenticating an user
  and saving a session hash which can be revoked later

  Returns: true if the session was created, false if it already existed
  Throws:
    - ILLEGAL_SESSION: If the user agent is invalid
  """
  create_session(mail: String!, pwd: String!, remember: Boolean = false): Boolean!

  """
  Create and fix a fresh access token

  Require logged: true
  Returns: true
  Throws: if the user is not found or the session revoked
  """
  refresh_session: Boolean!

  """
  If the email exist, send a reset code.
  The code is only valid for a short configurable period

  Returns: true
  """
  create_pwd_reset_code(mail: String!): Boolean!

  """
  Resend an account confirmation code

  Returns: true
  Throws:
    - USER_NOT_FOUND: If the user is not logged
  """
  create_account_comfirm_code: Boolean!

  """
  Update an user's password with a reset code

  Returns: true
  Throws:
    - PASSWORD_INVALID: If the pwd doesn't respect the policy
    - USER_NOT_FOUND: If the mail doesn't exist
    - INVALID_CODE: If the reset code is invalid
  """
  update_pwd(code: String!, mail: String! pwd: String!): Boolean!

  """
  Confirm the user account

  Returns: true
  Throws:
    - USER_NOT_FOUND: If the user is not logged
  """
  confirm_account(code: String!): Boolean!

  """
  Try to delete a session.
  If the ID is provided and the session exist it will be deleted.
  If the ID is not provided it will delete the current session
  If the user is not logged then it just remove session cookies

  Returns: true
  Throws:
    - ILLEGAL_SESSION: If the provided id doesn't exist
  """
  delete_session(id: ID): Boolean!

  """
  Attempt to delete some users

  Returns: true
  Throws:
    - USER_NOT_FOUND: If the user is not logged
    - UNAUTHORIZED: If the user is not an admin
  """
  admin_delete_users(ids: [ID!]!): Boolean!

  """
  Update an user's password (requires admin rights)

  Returns: true
  Throws:
    - USER_NOT_FOUND: If the user is not logged
    - UNAUTHORIZED: If the user is not an admin
  """
  admin_update_pwd(id: ID!, pwd: String!): Boolean!
}

type Session {
  uuid: ID!
  hash: String!
  ip: String!
  browserName: String
  osName: String
  deviceModel: String
  deviceType: String
  deviceVendor: String
}

type User {
  uuid: ID!
  mail: String!
  sessions: [Session!]!
  verified: Boolean!
}